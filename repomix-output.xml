This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
gradle/
  wrapper/
    gradle-wrapper.properties
src/
  main/
    java/
      com/
        zedd/
          webrtc/
            config/
              WebSocketConfig.java
            handler/
              SignalingHandler.java
            WebrtcApplication.java
    resources/
      static/
        index.html
      application.properties
  test/
    java/
      com/
        zedd/
          webrtc/
            WebrtcApplicationTests.java
.gitattributes
.gitignore
build.gradle
gradlew
gradlew.bat
settings.gradle
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="src/main/java/com/zedd/webrtc/config/WebSocketConfig.java">
package com.zedd.webrtc.config;

import com.zedd.webrtc.handler.SignalingHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        registry.addHandler(signalingHandler(), "/signal")
                .setAllowedOrigins("*"); // 실제 프로덕션에서는 특정 도메인으로 제한하세요
    }

    @Bean
    public SignalingHandler signalingHandler() {
        return new SignalingHandler();
    }
}
</file>

<file path="src/main/java/com/zedd/webrtc/handler/SignalingHandler.java">
package com.zedd.webrtc.handler;

import lombok.extern.slf4j.Slf4j;
import org.json.JSONObject;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.PingMessage;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
public class SignalingHandler extends TextWebSocketHandler {

    // 세션 저장 맵 (세션 ID -> 웹소켓 세션)
    private final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();

    // 세션 활성 상태 체크를 위한 스케줄러
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    // 세션별 마지막 활동 시간 (세션 ID -> 타임스탬프)
    private final Map<String, Long> lastActivityTime = new ConcurrentHashMap<>();

    // 연결 타임아웃 기간 (30초)
    private static final long SESSION_TIMEOUT = 30000;

    public SignalingHandler() {
        // 세션 활성 상태 체크 작업 스케줄 (10초마다 실행)
        scheduler.scheduleAtFixedRate(this::checkSessionActivity, 10, 10, TimeUnit.SECONDS);
    }

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        String sessionId = session.getId();
        sessions.put(sessionId, session);
        lastActivityTime.put(sessionId, System.currentTimeMillis());

        log.info("WebSocket 연결 성립: {}", sessionId);

        // 새 사용자에게 현재 접속자 수와 세션 ID 알림
        JSONObject message = new JSONObject();
        message.put("type", "user_count");
        message.put("count", sessions.size());
        message.put("sessionId", sessionId);

        try {
            session.sendMessage(new TextMessage(message.toString()));

            // 다른 모든 사용자에게 새 사용자 알림
            JSONObject newUserMsg = new JSONObject();
            newUserMsg.put("type", "new_user");
            newUserMsg.put("id", sessionId);

            broadcast(newUserMsg.toString(), sessionId);

            // 새 사용자에게 기존 사용자 목록 전송
            for (String existingId : sessions.keySet()) {
                if (!existingId.equals(sessionId)) {
                    JSONObject existingUserMsg = new JSONObject();
                    existingUserMsg.put("type", "new_user");
                    existingUserMsg.put("id", existingId);
                    session.sendMessage(new TextMessage(existingUserMsg.toString()));
                }
            }
        } catch (IOException e) {
            log.error("메시지 전송 오류", e);
        }
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) {
        String sessionId = session.getId();
        String payload = message.getPayload();

        // 세션 활동 시간 업데이트
        lastActivityTime.put(sessionId, System.currentTimeMillis());

        log.debug("메시지 수신: {} from {}", payload, sessionId);

        try {
            JSONObject jsonMessage = new JSONObject(payload);
            String type = jsonMessage.getString("type");

            // 채팅 메시지 처리
            if ("chat".equals(type)) {
                // 발신자 ID 추가
                jsonMessage.put("from", sessionId);

                // 타겟이 있으면 특정 사용자에게만 전송
                if (jsonMessage.has("target")) {
                    String targetId = jsonMessage.getString("target");
                    WebSocketSession targetSession = sessions.get(targetId);

                    if (targetSession != null && targetSession.isOpen()) {
                        targetSession.sendMessage(new TextMessage(jsonMessage.toString()));
                    }
                } else {
                    // 타겟이 없으면 모든 다른 사용자에게 브로드캐스트
                    broadcast(jsonMessage.toString(), sessionId);
                }
                return;
            }

            // 핑 메시지 처리
            if ("ping".equals(type)) {
                JSONObject pongMessage = new JSONObject();
                pongMessage.put("type", "pong");
                session.sendMessage(new TextMessage(pongMessage.toString()));
                return;
            }

            // WebRTC 시그널링 메시지 처리
            if (jsonMessage.has("target")) {
                String targetId = jsonMessage.getString("target");
                WebSocketSession targetSession = sessions.get(targetId);

                if (targetSession != null && targetSession.isOpen()) {
                    // 발신자 ID 추가
                    jsonMessage.put("from", sessionId);
                    targetSession.sendMessage(new TextMessage(jsonMessage.toString()));
                } else {
                    // 대상 세션이 없는 경우 오류 메시지 회신
                    JSONObject errorMsg = new JSONObject();
                    errorMsg.put("type", "error");
                    errorMsg.put("message", "대상 사용자가 연결되어 있지 않습니다.");
                    session.sendMessage(new TextMessage(errorMsg.toString()));
                }
            } else {
                // 타겟이 없으면 모든 다른 세션에 브로드캐스트
                jsonMessage.put("from", sessionId);
                broadcast(jsonMessage.toString(), sessionId);
            }
        } catch (Exception e) {
            log.error("메시지 처리 오류", e);
            try {
                // 클라이언트에 오류 알림
                JSONObject errorMsg = new JSONObject();
                errorMsg.put("type", "error");
                errorMsg.put("message", "메시지 처리 중 오류가 발생했습니다.");
                session.sendMessage(new TextMessage(errorMsg.toString()));
            } catch (IOException ex) {
                log.error("오류 메시지 전송 실패", ex);
            }
        }
    }

    protected void handlePongMessage(WebSocketSession session, PingMessage message) throws Exception {
        // Pong 메시지를 받으면 세션의
        String sessionId = session.getId();
        lastActivityTime.put(sessionId, System.currentTimeMillis());
        log.debug("Pong 메시지 수신: {}", sessionId);
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        String sessionId = session.getId();
        sessions.remove(sessionId);
        lastActivityTime.remove(sessionId);

        log.info("WebSocket 연결 종료: {} - 상태: {}", sessionId, status);

        // 다른 모든 사용자에게 사용자 퇴장 알림
        JSONObject message = new JSONObject();
        message.put("type", "user_left");
        message.put("id", sessionId);

        broadcast(message.toString(), null);
    }

    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) {
        String sessionId = session.getId();
        log.error("WebSocket 전송 오류: {}", sessionId, exception);

        // 에러 발생 시 세션 정리
        try {
            if (session.isOpen()) {
                session.close(CloseStatus.SERVER_ERROR);
            }
        } catch (IOException e) {
            log.error("세션 종료 중 오류 발생", e);
        } finally {
            sessions.remove(sessionId);
            lastActivityTime.remove(sessionId);

            // 다른 사용자에게 알림
            JSONObject message = new JSONObject();
            message.put("type", "user_left");
            message.put("id", sessionId);
            broadcast(message.toString(), null);
        }
    }

    /**
     * 모든 세션에 주기적으로 Ping 메시지를 보내 연결 상태 확인
     */
    private void checkSessionActivity() {
        long currentTime = System.currentTimeMillis();
        sessions.forEach((id, session) -> {
            try {
                // 마지막 활동 시간 확인
                Long lastActivity = lastActivityTime.get(id);
                if (lastActivity != null && currentTime - lastActivity > SESSION_TIMEOUT) {
                    log.info("세션 타임아웃: {}", id);
                    session.close(CloseStatus.NORMAL);
                    sessions.remove(id);
                    lastActivityTime.remove(id);

                    // 다른 사용자에게 알림
                    JSONObject message = new JSONObject();
                    message.put("type", "user_left");
                    message.put("id", id);
                    broadcast(message.toString(), null);
                } else if (session.isOpen()) {
                    // Ping 메시지 전송
                    session.sendMessage(new PingMessage(ByteBuffer.wrap("ping".getBytes())));
                }
            } catch (IOException e) {
                log.error("Ping 전송 중 오류: {}", id, e);
                try {
                    session.close(CloseStatus.SERVER_ERROR);
                } catch (IOException ex) {
                    log.error("세션 종료 중 오류", ex);
                }
                sessions.remove(id);
                lastActivityTime.remove(id);
            }
        });
    }

    private void broadcast(String message, String excludeId) {
        sessions.forEach((id, session) -> {
            // 제외할 ID가 없거나 현재 세션 ID가 제외할 ID와 다른 경우에만 전송
            if ((excludeId == null || !id.equals(excludeId)) && session.isOpen()) {
                try {
                    session.sendMessage(new TextMessage(message));
                } catch (IOException e) {
                    log.error("브로드캐스트 오류: {}", id, e);
                    // 오류 발생 시 세션 제거 처리
                    try {
                        session.close(CloseStatus.SERVER_ERROR);
                    } catch (IOException ex) {
                        log.error("세션 종료 중 오류", ex);
                    }
                    sessions.remove(id);
                    lastActivityTime.remove(id);
                }
            }
        });
    }

    /**
     * 애플리케이션 종료 시 리소스 정리
     */
    public void destroy() {
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}
</file>

<file path="src/main/java/com/zedd/webrtc/WebrtcApplication.java">
package com.zedd.webrtc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class WebrtcApplication {

    public static void main(String[] args) {
        SpringApplication.run(WebrtcApplication.class, args);
    }

}
</file>

<file path="src/main/resources/static/index.html">
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>제드 POC</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            color: #333;
            background-color: #f5f5f5;
            overflow-x: hidden;
            max-width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            padding: 12px 15px;
            background: #4a69bd;
            color: white;
            text-align: center;
            position: relative;
            z-index: 100;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .status-bar {
            background: #f1f1f1;
            padding: 8px 15px;
            font-size: 0.8rem;
            color: #555;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        .main-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: calc(100vh - 120px);
            position: relative;
            overflow: hidden;
        }

        .videos-container {
            width: 100%;
            position: relative;
            background: #000;
            flex: 1;
        }

        #remoteVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            z-index: 1;
        }

        .local-video-container {
            position: absolute;
            width: 30%;
            max-width: 150px;
            right: 15px;
            top: 15px;
            z-index: 10;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        #localVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
            background: #222;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            padding: 15px;
            background: white;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.05);
        }

        .control-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1.3rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            color: white;
        }

        .start-button {
            background: #2ecc71;
        }

        .call-button {
            background: #3498db;
        }

        .hangup-button {
            background: #e74c3c;
        }

        .chat-button {
            background: #9b59b6;
        }

        .users-button {
            background: #f39c12;
        }

        .disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* 채팅 패널 */
        .chat-panel {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 60%;
            background: white;
            z-index: 50;
            border-radius: 20px 20px 0 0;
            box-shadow: 0 -4px 10px rgba(0,0,0,0.1);
            transform: translateY(100%);
            transition: transform 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

        .chat-panel.active {
            transform: translateY(0);
        }

        .chat-header {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
        }

        .chat-header h3 {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .close-chat {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #555;
        }

        #chatMessages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .chat-message {
            max-width: 80%;
            padding: 10px 12px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            font-size: 0.95rem;
        }

        .chat-message.mine {
            align-self: flex-end;
            background-color: #e3f2fd;
            border-bottom-right-radius: 4px;
        }

        .chat-message.others {
            align-self: flex-start;
            background-color: #f1f1f1;
            border-bottom-left-radius: 4px;
        }

        .sender {
            font-size: 0.75rem;
            margin-bottom: 3px;
            color: #666;
        }

        .chat-input-container {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
            background: #f9f9f9;
        }

        #chatInput {
            flex: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 24px;
            outline: none;
            font-size: 0.95rem;
        }

        #sendButton {
            width: 40px;
            height: 40px;
            margin-left: 8px;
            border-radius: 50%;
            border: none;
            background: #4a69bd;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        /* 사용자 목록 패널 */
        .users-panel {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 50%;
            background: white;
            z-index: 50;
            border-radius: 20px 20px 0 0;
            box-shadow: 0 -4px 10px rgba(0,0,0,0.1);
            transform: translateY(100%);
            transition: transform 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

        .users-panel.active {
            transform: translateY(0);
        }

        .users-header {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
        }

        .users-header h3 {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .close-users {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #555;
        }

        #userList {
            flex: 1;
            overflow-y: auto;
            padding: 10px 15px;
            list-style: none;
        }

        .user-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 5px;
            background: #f9f9f9;
            border-radius: 10px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: #ccc;
            border-radius: 50%;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 500;
        }

        .call-user {
            padding: 8px 15px;
            background: #4a69bd;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 40;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .overlay.active {
            opacity: 1;
            pointer-events: all;
        }

        @media (max-width: 480px) {
            .control-button {
                width: 45px;
                height: 45px;
                font-size: 1.1rem;
            }

            .local-video-container {
                width: 35%;
                right: 10px;
                top: 10px;
            }
        }
    </style>
</head>
<body>
<div class="header">
    <h1>제드 POC</h1>
</div>

<div id="status" class="status-bar">연결 대기 중...</div>

<div class="main-container">
    <div class="videos-container">
        <video id="remoteVideo" autoplay playsinline></video>
        <div class="local-video-container">
            <video id="localVideo" autoplay muted playsinline></video>
        </div>
    </div>

    <div class="controls">
        <button id="startButton" class="control-button start-button">📷</button>
        <button id="callButton" class="control-button call-button disabled" disabled>📞</button>
        <button id="hangupButton" class="control-button hangup-button disabled" disabled>❌</button>
        <button id="chatButton" class="control-button chat-button">💬</button>
        <button id="usersButton" class="control-button users-button">👥</button>
    </div>
</div>

<!-- 채팅 패널 -->
<div class="chat-panel" id="chatPanel">
    <div class="chat-header">
        <h3>채팅</h3>
        <button class="close-chat" id="closeChat">×</button>
    </div>
    <div id="chatMessages"></div>
    <div class="chat-input-container">
        <input type="text" id="chatInput" placeholder="메시지 입력..." disabled />
        <button id="sendButton" disabled>➤</button>
    </div>
</div>

<!-- 사용자 목록 패널 -->
<div class="users-panel" id="usersPanel">
    <div class="users-header">
        <h3>접속자 목록</h3>
        <button class="close-users" id="closeUsers">×</button>
    </div>
    <ul id="userList"></ul>
</div>

<!-- 오버레이 -->
<div class="overlay" id="overlay"></div>

<script>
    // DOM 요소
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const startButton = document.getElementById('startButton');
    const callButton = document.getElementById('callButton');
    const hangupButton = document.getElementById('hangupButton');
    const chatButton = document.getElementById('chatButton');
    const usersButton = document.getElementById('usersButton');
    const statusDiv = document.getElementById('status');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');
    const chatPanel = document.getElementById('chatPanel');
    const closeChat = document.getElementById('closeChat');
    const usersPanel = document.getElementById('usersPanel');
    const closeUsers = document.getElementById('closeUsers');
    const userList = document.getElementById('userList');
    const overlay = document.getElementById('overlay');

    // 변수 초기화
    let localStream;
    let peerConnection;
    let websocket;
    let selectedUserId;
    let mySessionId;
    let isChatOpen = false;
    let isUsersOpen = false;

    // WebRTC 구성
    const configuration = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' }
        ]
    };

    // 패널 제어 함수
    function toggleChatPanel() {
        chatPanel.classList.toggle('active');
        overlay.classList.toggle('active');
        isChatOpen = chatPanel.classList.contains('active');
        if (isChatOpen && isUsersOpen) {
            toggleUsersPanel();
        }

        if (isChatOpen) {
            chatInput.focus();
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    function toggleUsersPanel() {
        usersPanel.classList.toggle('active');
        overlay.classList.toggle('active');
        isUsersOpen = usersPanel.classList.contains('active');
        if (isUsersOpen && isChatOpen) {
            toggleChatPanel();
        }
    }

    // 이벤트 리스너
    startButton.addEventListener('click', startVideo);
    callButton.addEventListener('click', startCall);
    hangupButton.addEventListener('click', hangup);
    chatButton.addEventListener('click', toggleChatPanel);
    usersButton.addEventListener('click', toggleUsersPanel);
    closeChat.addEventListener('click', toggleChatPanel);
    closeUsers.addEventListener('click', toggleUsersPanel);
    overlay.addEventListener('click', () => {
        if (isChatOpen) toggleChatPanel();
        if (isUsersOpen) toggleUsersPanel();
    });

    // 채팅 이벤트
    sendButton.addEventListener('click', sendChatMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendChatMessage();
        }
    });

    // 비디오 스트림 시작
    async function startVideo() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: "user" }, // 전면 카메라 사용
                audio: true
            });
            localVideo.srcObject = localStream;

            startButton.disabled = true;
            startButton.classList.add('disabled');
            callButton.disabled = false;
            callButton.classList.remove('disabled');

            statusDiv.textContent = '카메라 준비 완료. 연결 중...';

            // 시그널링 서버 연결
            connectSignaling();
        } catch (error) {
            console.error('미디어 스트림 획득 오류:', error);
            statusDiv.textContent = `카메라/마이크 접근 오류: ${error.message}`;
            alert('카메라 또는 마이크 접근이 거부되었습니다.');
        }
    }

    // 시그널링 서버 연결
    function connectSignaling() {
        const wsProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${wsProtocol}//${location.host}/signal`;

        websocket = new WebSocket(wsUrl);

        websocket.onopen = () => {
            statusDiv.textContent = '서버에 연결되었습니다.';
            chatInput.disabled = false;
            sendButton.disabled = false;
        };

        websocket.onmessage = (event) => {
            const message = JSON.parse(event.data);
            console.log('메시지 수신:', message);

            switch(message.type) {
                case 'user_count':
                    mySessionId = message.sessionId || websocket._socket.id;
                    statusDiv.textContent = `${message.count}명 접속 중`;
                    break;

                case 'new_user':
                    addUser(message.id);
                    break;

                case 'user_left':
                    removeUser(message.id);
                    if (selectedUserId === message.id) {
                        hangup();
                    }
                    break;

                case 'chat':
                    displayChatMessage(message);
                    break;

                case 'offer':
                    handleOffer(message);
                    break;

                case 'answer':
                    handleAnswer(message);
                    break;

                case 'ice_candidate':
                    handleIceCandidate(message);
                    break;

                case 'hang_up':
                    if (message.from === selectedUserId) {
                        hangup();
                        statusDiv.textContent = '상대방이 통화를 종료했습니다.';
                    }
                    break;

                default:
                    console.log('알 수 없는 메시지 유형:', message.type);
            }
        };

        websocket.onclose = () => {
            statusDiv.textContent = '서버 연결이 끊겼습니다.';
            chatInput.disabled = true;
            sendButton.disabled = true;
        };

        websocket.onerror = (error) => {
            statusDiv.textContent = '서버 연결 오류';
            console.error('WebSocket 오류:', error);
            chatInput.disabled = true;
            sendButton.disabled = true;
        };
    }

    // 채팅 메시지 전송
    function sendChatMessage() {
        const messageText = chatInput.value.trim();
        if (messageText && websocket && websocket.readyState === WebSocket.OPEN) {
            const chatMessage = {
                type: 'chat',
                message: messageText,
                timestamp: new Date().toISOString()
            };

            // 특정 상대방과 통화 중이면 해당 상대에게만 메시지 전송
            if (selectedUserId) {
                chatMessage.target = selectedUserId;
            }

            websocket.send(JSON.stringify(chatMessage));

            // 내 메시지 즉시 표시
            displayChatMessage({
                ...chatMessage,
                from: 'me'
            });

            chatInput.value = '';
        }
    }

    // 채팅 메시지 표시
    function displayChatMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message';

        // 내가 보낸 메시지인지 확인
        const isMyMessage = message.from === 'me' || message.from === mySessionId;
        messageDiv.classList.add(isMyMessage ? 'mine' : 'others');

        const senderDiv = document.createElement('div');
        senderDiv.className = 'sender';
        senderDiv.textContent = isMyMessage ? '나' : `상대방`;

        const contentDiv = document.createElement('div');
        contentDiv.textContent = message.message;

        messageDiv.appendChild(senderDiv);
        messageDiv.appendChild(contentDiv);

        chatMessages.appendChild(messageDiv);

        // 스크롤을 최신 메시지 위치로 이동
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // 채팅 패널이 닫혀있으면 알림
        if (!isChatOpen) {
            chatButton.innerHTML = '💬 <span style="position:absolute;top:0;right:0;width:10px;height:10px;background:red;border-radius:50%;"></span>';
            // 진동 알림 (모바일)
            if (navigator.vibrate) {
                navigator.vibrate(100);
            }
        }
    }

    // 사용자 목록에 추가
    function addUser(userId) {
        if (userId !== mySessionId && !document.getElementById(`user-${userId}`)) {
            const li = document.createElement('li');
            li.id = `user-${userId}`;
            li.className = 'user-item';

            const avatar = document.createElement('div');
            avatar.className = 'user-avatar';
            avatar.textContent = userId.slice(0, 2).toUpperCase();

            const userInfo = document.createElement('div');
            userInfo.className = 'user-info';

            const userName = document.createElement('div');
            userName.className = 'user-name';
            userName.textContent = `사용자 ${userId.slice(0, 8)}`;

            userInfo.appendChild(userName);

            const callBtn = document.createElement('button');
            callBtn.className = 'call-user';
            callBtn.textContent = '통화';
            callBtn.addEventListener('click', () => {
                selectedUserId = userId;
                startCall();
                toggleUsersPanel();
            });

            li.appendChild(avatar);
            li.appendChild(userInfo);
            li.appendChild(callBtn);
            userList.appendChild(li);
        }
    }

    // 사용자 목록에서 제거
    function removeUser(userId) {
        const userElement = document.getElementById(`user-${userId}`);
        if (userElement) {
            userList.removeChild(userElement);
        }
    }

    // 피어 연결 생성
    function createPeerConnection() {
        peerConnection = new RTCPeerConnection(configuration);

        // 로컬 스트림 추가
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });

        // ICE 후보 이벤트
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                sendMessage({
                    type: 'ice_candidate',
                    candidate: event.candidate,
                    target: selectedUserId
                });
            }
        };

        // 원격 스트림 이벤트
        peerConnection.ontrack = (event) => {
            if (event.streams && event.streams[0]) {
                remoteVideo.srcObject = event.streams[0];
            }
        };

        // 연결 상태 변경 이벤트
        peerConnection.oniceconnectionstatechange = () => {
            console.log('ICE 연결 상태 변경:', peerConnection.iceConnectionState);
            if (peerConnection.iceConnectionState === 'connected') {
                statusDiv.textContent = '통화 연결됨';
            } else if (peerConnection.iceConnectionState === 'disconnected') {
                statusDiv.textContent = '통화 연결 끊김';
            } else if (peerConnection.iceConnectionState === 'failed') {
                statusDiv.textContent = '통화 연결 실패';
                hangup();
            }
        };
    }

    // 통화 시작
    async function startCall() {
        if (!selectedUserId && userList.children.length > 0) {
            // 사용자가 선택되지 않았으면 첫 번째 사용자 선택
            const firstUser = userList.children[0];
            const userId = firstUser.id.replace('user-', '');
            selectedUserId = userId;
        }

        if (!selectedUserId) {
            alert('통화할 상대방이 없습니다.');
            return;
        }

        createPeerConnection();

        try {
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            sendMessage({
                type: 'offer',
                sdp: peerConnection.localDescription,
                target: selectedUserId
            });

            callButton.disabled = true;
            callButton.classList.add('disabled');
            hangupButton.disabled = false;
            hangupButton.classList.remove('disabled');
            statusDiv.textContent = '통화 연결 중...';
        } catch (error) {
            console.error('Offer 생성 오류:', error);
            statusDiv.textContent = `통화 연결 오류: ${error.message}`;
        }
    }

    // Offer 처리
    async function handleOffer(message) {
        selectedUserId = message.from;
        createPeerConnection();

        try {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp));
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);

            sendMessage({
                type: 'answer',
                sdp: peerConnection.localDescription,
                target: message.from
            });

            callButton.disabled = true;
            callButton.classList.add('disabled');
            hangupButton.disabled = false;
            hangupButton.classList.remove('disabled');
            statusDiv.textContent = '통화 연결 중...';
        } catch (error) {
            console.error('Answer 생성 오류:', error);
            statusDiv.textContent = `통화 응답 오류: ${error.message}`;
        }
    }

    // Answer 처리
    async function handleAnswer(message) {
        try {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp));
            statusDiv.textContent = '통화 연결됨';
        } catch (error) {
            console.error('RemoteDescription 설정 오류:', error);
            statusDiv.textContent = `원격 응답 처리 오류: ${error.message}`;
        }
    }

    // ICE 후보 처리
    async function handleIceCandidate(message) {
        try {
            if (peerConnection) {
                await peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
            }
        } catch (error) {
            console.error('ICE 후보 추가 오류:', error);
        }
    }

    // 메시지 전송
    function sendMessage(message) {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify(message));
            console.log('메시지 전송:', message);
        }
    }

    // 통화 종료
    function hangup() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        remoteVideo.srcObject = null;
        callButton.disabled = false;
        callButton.classList.remove('disabled');
        hangupButton.disabled = true;
        hangupButton.classList.add('disabled');

        sendMessage({
            type: 'hang_up',
            target: selectedUserId
        });

        selectedUserId = null;
        statusDiv.textContent = '통화가 종료되었습니다.';
    }

    // 모바일 디바이스 회전 처리
    window.addEventListener('orientationchange', () => {
        // 방향 전환 시 비디오 크기 조정
        setTimeout(() => {
            const videoContainer = document.querySelector('.videos-container');
            if (window.orientation === 90 || window.orientation === -90) {
                // 가로 모드
                videoContainer.style.height = `${window.innerHeight - 80}px`;
            } else {
                // 세로 모드
                videoContainer.style.height = '';
            }
        }, 300);
    });

    // iOS Safari 전체 화면 이슈 처리
    function fixIOSViewport() {
        document.documentElement.style.height = `${window.innerHeight}px`;
    }

    window.addEventListener('resize', fixIOSViewport);
    fixIOSViewport();

    // 앱 시작 시 알림
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js').then(() => {
            console.log('Service Worker 등록 성공');
        });
    }

    // 브라우저가 닫힐 때 연결 정리
    window.addEventListener('beforeunload', () => {
        if (peerConnection) {
            peerConnection.close();
        }
        if (websocket) {
            websocket.close();
        }
    });
</script>
</body>
</html>
</file>

<file path="src/main/resources/application.properties">
spring.application.name=webrtc
</file>

<file path="src/test/java/com/zedd/webrtc/WebrtcApplicationTests.java">
package com.zedd.webrtc;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class WebrtcApplicationTests {

    @Test
    void contextLoads() {
    }

}
</file>

<file path=".gitattributes">
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary
</file>

<file path=".gitignore">
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/
</file>

<file path="build.gradle">
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.zedd'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation("org.json:json:20250107")
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="settings.gradle">
rootProject.name = 'webrtc'
</file>

</files>
